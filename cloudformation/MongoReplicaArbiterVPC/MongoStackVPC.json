{
	"AWSTemplateFormatVersion" : "2010-09-09",
	"Description" : "MongoDB VPC test 20140524-01",
	"Parameters" : {
		"KeyName" : {
            "Description" :"Name of an existing EC2 KeyPair to enable SSH access",
            "Type" : "String",
            "Default" : "XKey"
        },
        "ClientIpAddressMongo" : {
			"Description" : "IP accessing MongoDB ports (in CIDR format, e.g.: 126.23.2.1/24)",
            "Type" :"String",
            "MinLength":"9",
            "MaxLength":"18",
            "AllowedPattern":"^(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})/(\\d{1,2})$",
            "ConstraintDescription":"Must be a valid IP in CIDR notation .",
            "Default" :"10.0.0.0/8"
        },

        "ClientIpAddressSSH" : {
			"Description" : "IP accessing SSH ports (in CIDR format, e.g.: 126.23.2.1/24)",
            "Type" :"String",
            "MinLength":"9",
            "MaxLength":"18",
            "AllowedPattern":"^(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})/(\\d{1,2})$",
            "ConstraintDescription":"Must be a valid IP in CIDR notation .",
            "Default" :"0.0.0.0/0"
        },

        "InstanceType" : {
            "Type" : "String",
            "Default" : "m1.small",
            "AllowedValues" : [ "m1.small", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.xlarge", "cc1.4xlarge" ],
            "Description" : "EC2 instance type (e.g.: m1.large, m1.xlarge, m2.xlarge)"
        },

        "VolumeSize" : {
            "Description" : "Volume size for each EBS volume",
            "Type" : "Number",
            "Default" : "10"
        },

        "ReplicaSetName" : {
            "Description" : "Name for the MongoDB Replica Set",
            "Type" : "String",
            "Default" : "ReplicaSet"
        },

        "VpcId" : {
            "Description" : "Name of  VPC",
            "Type" : "String",
            "Default" : "vpc-851918e9"
        },

        "SubnetId" : {
            "Description" : "Name of subnet in VPC",
            "Type" : "String",
            "Default" : "subnet-6da9451a"
        }

    },

	"Mappings" : {
        "InstanceTypeArch" : {
            "m1.small"    : { "Arch" : "64" },
            "m1.medium"   : { "Arch" : "64" },
            "m1.large"    : { "Arch" : "64" },
            "m1.xlarge"   : { "Arch" : "64" },
            "m2.xlarge"   : { "Arch" : "64" },
            "m2.2xlarge"  : { "Arch" : "64" },
            "m2.4xlarge"  : { "Arch" : "64" },
            "c1.medium"   : { "Arch" : "64" },
            "c1.xlarge"   : { "Arch" : "64" },
            "cc1.4xlarge" : { "Arch" : "64HVM" }
        },

        "RegionImageZone" : {
            "us-east-1"     : { "64" : "ami-fb8e9292", "64HVM" : "ami-978d91fe" },
            "us-west-2"     : { "64" : "ami-043a5034", "64HVM" : "ami-383a5008" },
            "us-west-1"     : { "64" : "ami-7aba833f", "64HVM" : "ami-5aba831f" },
            "eu-west-1"     : { "64" : "ami-2918e35e", "64HVM" : "ami-4b18e33c" },
            "ap-southeast-1": { "64" : "ami-b40d5ee6", "64HVM" : "ami-860d5ed4" },
            "ap-southeast-2": { "64" : "ami-3b4bd301", "64HVM" : "ami-cf4ad2f5" },
            "ap-northeast-1": { "64" : "ami-c9562fc8", "64HVM" : "ami-bb562fba" },
            "sa-east-1"     : { "64" : "ami-215dff3c", "64HVM" : "ami-635dff7e" }
        },

        "RegionZone" : {
            "us-east-1"     : {"AZ1" : "us-east-1a", "AZ2" : "us-east-1b", "AZ3" : "us-east-1b", "AZ4" : "us-east-1d", "AZ5" : "us-east-1e"},
            "us-west-1"     : {"AZ1" : "us-west-1a", "AZ2" : "us-west-1b", "AZ3" : "us-west-1c"},
            "us-west-2"     : {"AZ1" : "us-west-2a", "AZ2" : "us-west-2b"},
            "eu-west-1"     : {"AZ1" : "eu-west-1a", "AZ2" : "eu-west-1b", "AZ3" : "eu-west-1c"},
            "ap-southeast-1": {"AZ1" : "ap-southeast-1a", "AZ2" : "ap-southeast-1b"},
            "ap-southeast-2": {"AZ1" : "ap-southeast-2a", "AZ2" : "ap-southeast-2b"},
            "ap-northeast-1": {"AZ1" : "ap-northeast-1a", "AZ2" : "ap-northeast-1b"},
            "sa-east-1"     : {"AZ1" : "sa-east-1a", "AZ2" : "sa-east-1b"}
        }
	},

	"Resources" : {

		"IPAddressArbiter" : {
      		"Type" : "AWS::EC2::EIP",
      		"Properties" : {
        	"Domain" : "vpc",
        	"InstanceId" : { "Ref" : "MongoInstanceMemberArbiter" }
      		}
    	},

		"IPAddressMember1" : {
      		"Type" : "AWS::EC2::EIP",
      		"Properties" : {
        	"Domain" : "vpc",
        	"InstanceId" : { "Ref" : "MongoInstanceMember1" }
      		}
    	},

		"IPAddressPrim" : {
      		"Type" : "AWS::EC2::EIP",
      		"Properties" : {
        	"Domain" : "vpc",
        	"InstanceId" : { "Ref" : "MongoInstancePrim" }
      		}
    	},

    	"MongoSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "ReplicaSet Security Group",
                "VpcId" : { "Ref" : "VpcId" },
                "SecurityGroupIngress" : [
                        {"IpProtocol" : "tcp", "FromPort" : "27017", "ToPort" : "27017", "CidrIp" : { "Ref": "ClientIpAddressMongo" } },
                        {"IpProtocol" : "tcp", "FromPort" : "28017", "ToPort" : "28017", "CidrIp" : { "Ref": "ClientIpAddressMongo" } },
                        {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref": "ClientIpAddressSSH" } }
                ]
            }
        },

        "MongoSecurityGroupIngress" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "GroupId" : { "Ref" : "MongoSecurityGroup" },
                "IpProtocol" : "tcp", "FromPort" : "27017", "ToPort" : "27017", "SourceSecurityGroupId" : { "Ref" : "MongoSecurityGroup" }
            }
        },

        "StatusIngress" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "GroupId" : { "Ref" : "MongoSecurityGroup" },
                "IpProtocol" : "tcp", "FromPort" : "28017", "ToPort" : "28017", "SourceSecurityGroupId" : { "Ref" : "MongoSecurityGroup" }
            }
        },

        "CfnUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [ {
                    "PolicyName": "root",
                    "PolicyDocument": { "Statement": [ {
                        "Effect":"Allow",
                        "Action":"cloudformation:DescribeStackResource",
                        "Resource":"*"
                    } ] }
                } ]
            }
        },

        "AccessKey" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : { "Ref" : "CfnUser" }
            }
        },

        "MongoInstanceMemberArbiter" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "mdadm" : [],
                                "sysstat" : [],
                                "xfsprogs" : [],
                                "ntp" : []
                            }
                        },
                        "files" : {
                            "/etc/yum.repos.d/10gen.repo" : {
                                "content" : { "Fn::Join" : ["", [
                                    "[10gen]\n",
                                    "name=10gen Repository\n",
                                    "baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64\n",
                                    "gpgcheck=0\n"
                                ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/etc/rc.local" : {
                               "content" : { "Fn::Join" : ["", [
                                    "#!/bin/sh\n",
                                    "#\n",
                                    "# This script will be executed *after* all the other init scripts.\n",
                                    "# You can put your own initialization stuff in here if you don't\n",
                                    "# want to do the full Sys V style init stuff.\n",
                                    "# \n",
                                    "# See http://docs.mongodb.org/manual/faq/diagnostics/#does-tcp-keepalive-time-affect-sharded-clusters-and-replica-sets\n",
                                    "echo 300 > /proc/sys/net/ipv4/tcp_keepalive_time\n",
                                    "touch /var/lock/subsys/local\n"
                               ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                             }
                        },
                        "services" : {
                                "sysvinit" : {
                                     "ntpd"    : { "enabled" : "true", "ensureRunning" : "true" }
                                 }
                          }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "ImageId" : { "Fn::FindInMap" : [ "RegionImageZone", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "InstanceTypeArch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "Tags" : [{ "Key" : "Name", "Value" : "MongoArbiter" }],
                "SecurityGroupIds" : [ { "Ref" : "MongoSecurityGroup" } ],
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "SubnetId" },
                "AvailabilityZone" : { "Fn::FindInMap" : ["RegionZone", { "Ref" : "AWS::Region"}, "AZ1"] },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash\n",
                "# Sending all output to /tmp/install.log\n",
                "exec 2> /tmp/install.log\n",
                "exec >> /tmp/install.log\n",
                "# CloudFormation: Updating scripts\n",
                "#\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Error reporting helper function\n",
                "function error_exit\n",
                "{\n",
                "/opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandleMemberArbiter" }, "'\n",
                "exit 1\n",
                "}\n",
                "# CloudFormation: Initialize\n",
                "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r MongoInstanceMemberArbiter",
                "   --access-key ",  { "Ref" : "AccessKey" },
                "   --secret-key ", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
                "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",
                "# CLNGS UserData Start\n",
                "#\n",
                "RAIDMEMBERS=4\n",
                "# Wait until ALL EBS are connected\n",
                "while [ \"$(ls /dev/sdh*|wc -l)\" -lt \"$RAIDMEMBERS\" ]; do sleep 1; done\n",
                "#\n",
                "# LVM Creation\n",
                "#\n",
                "#\n",
                "# if all devices are ready then\n",
                "EBS=($(ls /dev/sdh*))\n",
                "if [ ${#EBS[@]} -eq $RAIDMEMBERS ]; then echo \"Desired EBSs ${#EBS[@]} Vs Ready $RAIDMEMBERS : Proceding...\"; pvcreate ${EBS[@]}; else exit; fi\n",
                "# if all PVs are ready then\n",
                "PVS=($(pvscan | head -n -1 |awk '{print $2}'))\n",
                "if [ ${#PVS[@]} -eq $RAIDMEMBERS ]; then echo \"Desired PVs ${#PVS[@]} Vs Ready $RAIDMEMBERS : Proceding...\"; vgcreate vg0 ${PVS[@]}; else exit; fi\n",
                "#\n",
                "lvcreate -i 4 -I 256 -n mongo -l 100%FREE vg0\n",
                "#\n",
                "# Tuning read-ahead=ON\n",
                "#\n",
                "blockdev -v --setra 128 ${EBS[@]}\n",
                "blockdev --setra 256 /dev/vg0/mongo\n",
                "#\n",
                "# Create MongoDB filesystem\n",
                "#\n",
                "mkfs.xfs -f -L mongo /dev/vg0/mongo\n",
                "mkdir -p /var/lib/mongo\n",
                "#\n",
                "# Update /etc/fstab\n",
                "#\n",
                "cat << END >> /etc/fstab\n",
                "/dev/vg0/mongo  /var/lib/mongo  xfs   noatime,nodiratime,logbufs=8,nodev,noexec   0 0\n",
                "END\n",
                "#\n",
                "# Mounting all new resources\n",
                "#\n",
                "mount -av\n",
                "#\n",
                "# Minimum performance tuning: Set limits for mongod user\n",
                "#\n",
                "cat << END > /etc/security/limits.conf\n",
                "mongod  soft  nofile  64000\n",
                "mongod  soft  nproc 32000\n",
                "mongos  soft  nofile  64000\n",
                "mongos  soft  nproc 32000\n",
                "END\n",
                "#\n",
                "# Updating RPMs and Installing MongoDB\n",
                "#\n",
                "yum update -y\n",
                "yum install mongo-10gen-server -y\n",
                "yum install mongodb-org-shell -y\n",
                "yum install mongodb-org-tools -y\n",
                "#\n",
                "# Create MongoDB config\n",
                "#\n",
                "cat << END > /etc/mongod.conf\n",
                "# mongod.conf\n",
                "dbpath=/var/lib/mongo\n",
                "logpath=/var/log/mongodb/mongod.log\n",
                "logappend=true\n",
                "fork=true\n",
                "replSet=", {"Ref" : "ReplicaSetName"}, "\n",
                "# Enable webserver REST\n",
                "rest = true\n",
                "httpinterface = true\n",
                "END\n",
                "#\n",
                "# Fixing mongod permission on /var/lib/mongo\n",
                "#\n",
                "chown -Rv mongod:mongod /var/lib/mongo\n",
                "#\n",
                "# Updating system config and starting MongoDB\n",
                "#\n",
                "chkconfig mongod on\n",
                "service mongod start\n",
                "#\n",
                "# CloudFormation signal that setup is complete\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"MongoInstanceMemberArbiter setup complete\" '", { "Ref" : "WaitHandleMemberArbiter" }, "'\n"
                ] ] } }
            }
        },

        "MongoVolume1MemberArbiter" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_MemberArbiter_Volume" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstanceMemberArbiter", "AvailabilityZone" ]}
            }
        },

        "MongoVolume2MemberArbiter" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_MemberArbiter_Volume" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstanceMemberArbiter", "AvailabilityZone" ]}
            }
        },

        "MongoVolume3MemberArbiter" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_MemberArbiter_Volume" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstanceMemberArbiter", "AvailabilityZone" ]}
            }
        },

        "MongoVolume4MemberArbiter" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_MemberArbiter_Volumee" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstanceMemberArbiter", "AvailabilityZone" ]}
            }
        },

        "MongoVolumeMount1MemberArbiter" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstanceMemberArbiter" },
                "VolumeId" : { "Ref" : "MongoVolume1MemberArbiter" },
                "Device" : "/dev/sdh1"
            }
        },

        "MongoVolumeMount2MemberArbiter" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstanceMemberArbiter" },
                "VolumeId" : { "Ref" : "MongoVolume2MemberArbiter" },
                "Device" : "/dev/sdh2"
            }
        },

        "MongoVolumeMount3MemberArbiter" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstanceMemberArbiter" },
                "VolumeId" : { "Ref" : "MongoVolume3MemberArbiter" },
                "Device" : "/dev/sdh3"
            }
        },

        "MongoVolumeMount4MemberArbiter" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstanceMemberArbiter" },
                "VolumeId" : { "Ref" : "MongoVolume4MemberArbiter" },
                "Device" : "/dev/sdh4"
            }
        },

        "WaitHandleMemberArbiter" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {}
        },

        "WaitConditionMemberArbiter" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "MongoInstanceMemberArbiter",
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandleMemberArbiter" },
                "Timeout" : "600"
            }
        },

		"MongoInstanceMember1" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "mdadm" : [],
                                "sysstat" : [],
                                "xfsprogs" : [],
                                "ntp" : []
                            }
                        },
                        "files" : {
                            "/etc/yum.repos.d/10gen.repo" : {
                                "content" : { "Fn::Join" : ["", [
                                    "[10gen]\n",
                                    "name=10gen Repository\n",
                                    "baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64\n",
                                    "gpgcheck=0\n"
                                ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/etc/rc.local" : {
                               "content" : { "Fn::Join" : ["", [
                                    "#!/bin/sh\n",
                                    "#\n",
                                    "# This script will be executed *after* all the other init scripts.\n",
                                    "# You can put your own initialization stuff in here if you don't\n",
                                    "# want to do the full Sys V style init stuff.\n",
                                    "# \n",
                                    "# See http://docs.mongodb.org/manual/faq/diagnostics/#does-tcp-keepalive-time-affect-sharded-clusters-and-replica-sets\n",
                                    "echo 300 > /proc/sys/net/ipv4/tcp_keepalive_time\n",
                                    "touch /var/lock/subsys/local\n"
                               ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                             }
                        },
                        "services" : {
                                "sysvinit" : {
                                     "ntpd"    : { "enabled" : "true", "ensureRunning" : "true" }
                                 }
                          }
                    }
                }
            },
            "DependsOn" : "MongoInstanceMemberArbiter",
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "ImageId" : { "Fn::FindInMap" : [ "RegionImageZone", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "InstanceTypeArch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "Tags" : [{ "Key" : "Name", "Value" : "MongoMember1" }],
                "SecurityGroupIds" : [ { "Ref" : "MongoSecurityGroup" } ],
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "SubnetId" },
                "AvailabilityZone" : { "Fn::FindInMap" : ["RegionZone", { "Ref" : "AWS::Region"}, "AZ1"] },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash\n",
                "# Sending all output to /tmp/install.log\n",
                "exec 2> /tmp/install.log\n",
                "exec >> /tmp/install.log\n",
                "# CloudFormation: Updating scripts\n",
                "#\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Error reporting helper function\n",
                "function error_exit\n",
                "{\n",
                "/opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandleMember1" }, "'\n",
                "exit 1\n",
                "}\n",
                "# CloudFormation: Initialize\n",
                "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r MongoInstanceMember1",
                "   --access-key ",  { "Ref" : "AccessKey" },
                "   --secret-key ", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
                "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",
                "# CLNGS UserData Start\n",
                "#\n",
                "RAIDMEMBERS=4\n",
                "# Wait until ALL EBS are connected\n",
                "while [ \"$(ls /dev/sdh*|wc -l)\" -lt \"$RAIDMEMBERS\" ]; do sleep 1; done\n",
                "#\n",
                "# LVM Creation\n",
                "#\n",
                "#\n",
                "# if all devices are ready then\n",
                "EBS=($(ls /dev/sdh*))\n",
                "if [ ${#EBS[@]} -eq $RAIDMEMBERS ]; then echo \"Desired EBSs ${#EBS[@]} Vs Ready $RAIDMEMBERS : Proceding...\"; pvcreate ${EBS[@]}; else exit; fi\n",
                "# if all PVs are ready then\n",
                "PVS=($(pvscan | head -n -1 |awk '{print $2}'))\n",
                "if [ ${#PVS[@]} -eq $RAIDMEMBERS ]; then echo \"Desired PVs ${#PVS[@]} Vs Ready $RAIDMEMBERS : Proceding...\"; vgcreate vg0 ${PVS[@]}; else exit; fi\n",
                "#\n",
                "lvcreate -i 4 -I 256 -n mongo -l 100%FREE vg0\n",
                "#\n",
                "# Tuning read-ahead=ON\n",
                "#\n",
                "blockdev -v --setra 128 ${EBS[@]}\n",
                "blockdev --setra 256 /dev/vg0/mongo\n",
                "#\n",
                "# Create MongoDB filesystem\n",
                "#\n",
                "mkfs.xfs -f -L mongo /dev/vg0/mongo\n",
                "mkdir -p /var/lib/mongo\n",
                "#\n",
                "# Update /etc/fstab\n",
                "#\n",
                "cat << END >> /etc/fstab\n",
                "/dev/vg0/mongo  /var/lib/mongo  xfs   noatime,nodiratime,logbufs=8,nodev,noexec   0 0\n",
                "END\n",
                "#\n",
                "# Mounting all new resources\n",
                "#\n",
                "mount -av\n",
                "#\n",
                "# Minimum performance tuning: Set limits for mongod user\n",
                "#\n",
                "cat << END > /etc/security/limits.conf\n",
                "mongod  soft  nofile  64000\n",
                "mongod  soft  nproc 32000\n",
                "mongos  soft  nofile  64000\n",
                "mongos  soft  nproc 32000\n",
                "END\n",
                "#\n",
                "# Updating RPMs and Installing MongoDB\n",
                "#\n",
                "yum update -y\n",
                "yum install mongo-10gen-server -y\n",
                "yum install mongodb-org-shell -y\n",
                "yum install mongodb-org-tools -y\n",
                "#\n",
                "# Create MongoDB config\n",
                "#\n",
                "cat << END > /etc/mongod.conf\n",
                "# mongod.conf\n",
                "dbpath=/var/lib/mongo\n",
                "logpath=/var/log/mongodb/mongod.log\n",
                "logappend=true\n",
                "fork=true\n",
                "replSet=", {"Ref" : "ReplicaSetName"}, "\n",
                "# Enable webserver REST\n",
                "rest = true\n",
                "httpinterface = true\n",
                "END\n",
                "#\n",
                "# Fixing mongod permission on /var/lib/mongo\n",
                "#\n",
                "chown -Rv mongod:mongod /var/lib/mongo\n",
                "#\n",
                "# Updating system config and starting MongoDB\n",
                "#\n",
                "chkconfig mongod on\n",
                "service mongod start\n",
                "#\n",
                "# CloudFormation signal that setup is complete\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"MongoInstanceMember1 setup complete\" '", { "Ref" : "WaitHandleMember1" }, "'\n"
                ] ] } }
            }
        },

        "MongoVolume1Member1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_Member1_Volume" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstanceMember1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume2Member1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_Member1_Volume" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstanceMember1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume3Member1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_Member1_Volume" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstanceMember1", "AvailabilityZone" ]}
            }
        },

        "MongoVolume4Member1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_Member1_Volumee" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstanceMember1", "AvailabilityZone" ]}
            }
        },

        "MongoVolumeMount1Member1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstanceMember1" },
                "VolumeId" : { "Ref" : "MongoVolume1Member1" },
                "Device" : "/dev/sdh1"
            }
        },

        "MongoVolumeMount2Member1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstanceMember1" },
                "VolumeId" : { "Ref" : "MongoVolume2Member1" },
                "Device" : "/dev/sdh2"
            }
        },

        "MongoVolumeMount3Member1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstanceMember1" },
                "VolumeId" : { "Ref" : "MongoVolume3Member1" },
                "Device" : "/dev/sdh3"
            }
        },

        "MongoVolumeMount4Member1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstanceMember1" },
                "VolumeId" : { "Ref" : "MongoVolume4Member1" },
                "Device" : "/dev/sdh4"
            }
        },

        "WaitHandleMember1" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {}
        },

        "WaitConditionMember1" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "MongoInstanceMember1",
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandleMember1" },
                "Timeout" : "600"
            }
        },

        "MongoInstancePrim" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "mdadm" : [],
                                "sysstat" : [],
                                "xfsprogs" : [],
                                "ntp" : []
                            }
                        },
                        "files" : {
                            "/etc/yum.repos.d/10gen.repo" : {
                                "content" : { "Fn::Join" : ["", [
                                    "[10gen]\n",
                                    "name=10gen Repository\n",
                                    "baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64\n",
                                    "gpgcheck=0\n"
                                ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/etc/rc.local" : {
                               "content" : { "Fn::Join" : ["", [
                                    "#!/bin/sh\n",
                                    "#\n",
                                    "# This script will be executed *after* all the other init scripts.\n",
                                    "# You can put your own initialization stuff in here if you don't\n",
                                    "# want to do the full Sys V style init stuff.\n",
                                    "# \n",
                                    "# See http://docs.mongodb.org/manual/faq/diagnostics/#does-tcp-keepalive-time-affect-sharded-clusters-and-replica-sets\n",
                                    "echo 300 > /proc/sys/net/ipv4/tcp_keepalive_time\n",
                                    "touch /var/lock/subsys/local\n"
                               ] ] },
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                             }
                        },
                        "services" : {
                                "sysvinit" : {
                                     "ntpd"    : { "enabled" : "true", "ensureRunning" : "true" }
                                 }
                          }
                    }
                }
            },
            "DependsOn" : "MongoInstanceMember1",
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "ImageId" : { "Fn::FindInMap" : [ "RegionImageZone", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "InstanceTypeArch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "Tags" : [{ "Key" : "Name", "Value" : "MongoPrimary" }],
                "SecurityGroupIds" : [ { "Ref" : "MongoSecurityGroup" } ],
                "KeyName" : { "Ref" : "KeyName" },
                "SubnetId" : { "Ref" : "SubnetId" },
                "AvailabilityZone" : { "Fn::FindInMap" : ["RegionZone", { "Ref" : "AWS::Region"}, "AZ1"] },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash\n",
                "# Sending all output to /tmp/install.log\n",
                "exec 2> /tmp/install.log\n",
                "exec >> /tmp/install.log\n",
                "# CloudFormation: Updating scripts\n",
                "#\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Error reporting helper function\n",
                "function error_exit\n",
                "{\n",
                "/opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandlePrim" }, "'\n",
                "exit 1\n",
                "}\n",
                "# CloudFormation: Initialize\n",
                "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r MongoInstancePrim",
                "   --access-key ",  { "Ref" : "AccessKey" },
                "   --secret-key ", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
                "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",
                "# CLNGS UserData Start\n",
                "#\n",
                "RAIDMEMBERS=4\n",
                "# Wait until ALL EBS are connected\n",
                "while [ \"$(ls /dev/sdh*|wc -l)\" -lt \"$RAIDMEMBERS\" ]; do sleep 1; done\n",
                "#\n",
                "# LVM Creation\n",
                "#\n",
                "#\n",
                "# if all devices are ready then\n",
                "EBS=($(ls /dev/sdh*))\n",
                "if [ ${#EBS[@]} -eq $RAIDMEMBERS ]; then echo \"Desired EBSs ${#EBS[@]} Vs Ready $RAIDMEMBERS : Proceding...\"; pvcreate ${EBS[@]}; else exit; fi\n",
                "# if all PVs are ready then\n",
                "PVS=($(pvscan | head -n -1 |awk '{print $2}'))\n",
                "if [ ${#PVS[@]} -eq $RAIDMEMBERS ]; then echo \"Desired PVs ${#PVS[@]} Vs Ready $RAIDMEMBERS : Proceding...\"; vgcreate vg0 ${PVS[@]}; else exit; fi\n",
                "#\n",
                "lvcreate -i 4 -I 256 -n mongo -l 100%FREE vg0\n",
                "#\n",
                "# Tuning read-ahead=ON\n",
                "#\n",
                "blockdev -v --setra 128 ${EBS[@]}\n",
                "blockdev --setra 256 /dev/vg0/mongo\n",
                "#\n",
                "# Create MongoDB filesystem\n",
                "#\n",
                "mkfs.xfs -f -L mongo /dev/vg0/mongo\n",
                "mkdir -p /var/lib/mongo\n",
                "#\n",
                "# Update /etc/fstab\n",
                "#\n",
                "cat << END >> /etc/fstab\n",
                "/dev/vg0/mongo  /var/lib/mongo  xfs   noatime,nodiratime,logbufs=8,nodev,noexec   0 0\n",
                "END\n",
                "#\n",
                "# Mounting all new resources\n",
                "#\n",
                "mount -av\n",
                "#\n",
                "# Minimum performance tuning: Set limits for mongod user\n",
                "#\n",
                "cat << END > /etc/security/limits.conf\n",
                "mongod  soft  nofile  64000\n",
                "mongod  soft  nproc 32000\n",
                "mongos  soft  nofile  64000\n",
                "mongos  soft  nproc 32000\n",
                "END\n",
                "#\n",
                "# Updating RPMs and Installing MongoDB\n",
                "#\n",
                "yum update -y\n",
                "yum install mongo-10gen-server -y\n",
                "yum install mongodb-org-shell -y\n",
                "yum install mongodb-org-tools -y\n",
                "#\n",
                "# Create MongoDB config\n",
                "#\n",
                "cat << END > /etc/mongod.conf\n",
                "# mongod.conf\n",
                "dbpath=/var/lib/mongo\n",
                "logpath=/var/log/mongodb/mongod.log\n",
                "logappend=true\n",
                "fork=true\n",
                "replSet=", {"Ref" : "ReplicaSetName"}, "\n",
                "# Enable webserver REST\n",
                "rest = true\n",
                "httpinterface = true\n",
                "END\n",
                "#\n",
                "# Fixing mongod permission on /var/lib/mongo\n",
                "#\n",
                "chown -Rv mongod:mongod /var/lib/mongo\n",
                "#\n",
                "# Updating system config and starting MongoDB\n",
                "#\n",
                "chkconfig mongod on\n",
                "service mongod start\n",
                "#\n",
                "# Waiting until MongoDB is UP and Running...\n",
                "# Workaround to avoid comparison and therefor using parentheses in sentence\n",
                "# Create replica set configuration on the PRIMARY\n",
                "MASTER=$(ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'); \n",
                "cat <<EOF > /tmp/replicaSetConfigInit.js\n",
                "config = {_id: \"", { "Ref" : "ReplicaSetName" } ,"\", members : [",
                    "{_id : 0, host:\"$MASTER:27017\"},",
                    "{_id : 1, host:\"", { "Fn::GetAtt" : ["MongoInstanceMember1", "PrivateIp"] },":27017\"},",
                    "{_id : 2, host:\"", { "Fn::GetAtt" : ["MongoInstanceMemberArbiter", "PrivateIp"] },":27017\", \"arbiterOnly\" : true }",
                "]};\n",
                "rs.initiate(config);\n",
                "EOF\n",
                "/usr/bin/mongo /tmp/replicaSetConfigInit.js > /tmp/replica-setup.log\n",
                "# CLNGS UserData End\n",
                "# CloudFormation signal that setup is complete\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"MongoInstancePrim setup complete\" '", { "Ref" : "WaitHandlePrim" }, "'\n"
                ] ] } }
            }
        },

        "MongoVolume1Prim" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_Prim_Volume" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstancePrim", "AvailabilityZone" ]}
            }
        },

        "MongoVolume2Prim" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_Prim_Volume" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstancePrim", "AvailabilityZone" ]}
            }
        },

        "MongoVolume3Prim" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_Prim_Volume" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstancePrim", "AvailabilityZone" ]}
            }
        },

        "MongoVolume4Prim" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "Tags" : [{ "Key" : "Name", "Value" : "Mongo_Prim_Volumee" }],
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstancePrim", "AvailabilityZone" ]}
            }
        },

        "MongoVolumeMount1Prim" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstancePrim" },
                "VolumeId" : { "Ref" : "MongoVolume1Prim" },
                "Device" : "/dev/sdh1"
            }
        },

        "MongoVolumeMount2Prim" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstancePrim" },
                "VolumeId" : { "Ref" : "MongoVolume2Prim" },
                "Device" : "/dev/sdh2"
            }
        },

        "MongoVolumeMount3Prim" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstancePrim" },
                "VolumeId" : { "Ref" : "MongoVolume3Prim" },
                "Device" : "/dev/sdh3"
            }
        },

        "MongoVolumeMount4Prim" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoInstancePrim" },
                "VolumeId" : { "Ref" : "MongoVolume4Prim" },
                "Device" : "/dev/sdh4"
            }
        },

        "WaitHandlePrim" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {}
        },

        "WaitConditionPrim" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "MongoInstancePrim",
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandlePrim" },
                "Timeout" : "600"
            }
        }
	},

	    "Outputs" : {
        "ReplicaSetMemberName1" : {
            "Value" : { "Fn::GetAtt" : [ "MongoInstancePrim", "PublicDnsName" ] },
            "Description" : "Public DNS name of the MongoDB Replica Set endpoint (node 1 : PRIMARY)"
        },
        "ReplicaSetMemberName2" : {
            "Value" : { "Fn::GetAtt" : [ "MongoInstanceMember1", "PublicDnsName" ] },
            "Description" : "Public DNS name of the MongoDB Replica Set node 2"
        },
        "ReplicaSetMemberName3" : {
            "Value" : { "Fn::GetAtt" : [ "MongoInstanceMemberArbiter", "PublicDnsName" ] },
            "Description" : "Public DNS name of the MongoDB Replica Set Arbiter"
        }
    }

}